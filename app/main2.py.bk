import re
import logging
from scapy.all import sniff, IP, TCP
import mysql.connector
from pyfiglet import Figlet
from tqdm import tqdm

# define
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="",
  database="ymp"
)

mycursor = mydb.cursor()

if mydb.is_connected():
    
    print("CONNECT!")

    mycursor.execute(
        """
        CREATE TABLE IF NOT EXISTS logs (
            id INT AUTO_INCREMENT PRIMARY KEY,
            log_message TEXT NOT NULL,
            log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ip_src VARCHAR(45),
            tcp_sport INT,
            ip_dst VARCHAR(45),
            tcp_dport INT
        );
        """
    )

logging.basicConfig(filename='logs.txt', level=logging.INFO)

def banner():
    f = Figlet()
    print(f.renderText("Threats_Detector"))
    print("~# Author: PT. Yuk Mari Proyek Indonesia")
    print("~# Copyright Â© 2025")

def detect_xss(data):

    xss_patterns = [
        r"<script>", 
        r"</script>", 
        r"on[a-z]+=", 
        r"javascript:", 
        r"vbscript:", 
        r"expression", 
        r"onerror", 
        r"onconfirm" 
    ]

    for pattern in tqdm(xss_patterns, desc="Loading XSS Payloads", unit="pattern"):
        if re.search(pattern, data, re.IGNORECASE):
            return pattern
        
    return False

def analyze_packet(packet):

    try:
        if IP in packet and TCP in packet:
            ip_src = packet[IP].src
            ip_dst = packet[IP].dst
            tcp_sport = packet[TCP].sport
            tcp_dport = packet[TCP].dport

            try:
                payload = bytes(packet[TCP].payload).decode('utf-8', errors='ignore') 
            except UnicodeDecodeError:
                payload = "Error to decode payload!"

            if detect_xss(payload):
                log_msg = f"Possible XSS attack detected! -- {payload}"
                
                print (log_msg)
                logging.info(log_msg)

                # insert log into mysql db
                sql = "INSERT INTO logs (log_message,ip_src,tcp_sport,ip_dst,tcp_dport) VALUES (%s,%s,%s,%s,%s)"
                mycursor.execute(sql, (log_msg,ip_src,tcp_sport,ip_dst,tcp_dport))
                mydb.commit()

                return True

    except Exception as e:
        print(f"Error analyzing packets ==> {e}")

if __name__ == '__main__':
    banner()
    sniff(prn=analyze_packet)
    print("Server is running...")